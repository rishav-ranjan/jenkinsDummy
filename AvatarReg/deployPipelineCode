//Pipeline Project Seed Job


import org.apache.commons.io.FilenameUtils


def pipelineProjName="wppAvatarReg"
def pipelineProjBaseFolderJenkins="WPP2/AvatarReg"
def pipelineProjBuildRepoURL="http://52.1.56.86/nexus/content/repositories/pipeline/com/hp/wpp/cd/pipeline/wppAvatarReg"
def pipelineProjVersion="1.0.4"
def pipelineProjArtifactName="${pipelineProjName}-${pipelineProjVersion}.jar"


def workspaceDir = hudson.model.Executor.currentExecutor().getCurrentWorkspace()
println "Workspace is ${workspaceDir}"




//clean workspace
new File("${workspaceDir}").eachFile() {fi ->
    fi.delete()}
new File("${workspaceDir}").eachDir() {dir ->
    dir.deleteDir()}

println("Cleaned Workspace")

// Download Pipeline Project Artifact
System.properties.putAll( ["http.proxyHost":"web-proxy.houston.hp.com", "http.proxyPort":"8080"] )  
def url ="${pipelineProjBuildRepoURL}/${pipelineProjVersion}/${pipelineProjArtifactName}"  
def fileObj = new FileOutputStream("${workspaceDir}/${pipelineProjArtifactName}")  
def out = new BufferedOutputStream(fileObj)  
out << new URL(url).openStream()  
out.close()  

// Untar artifact
["/bin/bash", "-c", "cd ${workspaceDir} ;unzip ${pipelineProjArtifactName}"].execute().text 

//delete META-INF folder
directory  = new File("${workspaceDir}/META-INF")
directory.deleteDir()

// Seed folders and pipeline scripts
//folder("${pipelineProjBaseFolderJenkins}")

new File("${workspaceDir}").eachDirRecurse() { dir ->  
  
  	folderPath="${pipelineProjBaseFolderJenkins}/"+"${workspaceDir}".toURI().relativize( dir.getPath().toURI() ).toString()
  	folder(folderPath) {
    	//displayName('Project A')
    	description('Created by Seed Job.Do not configure.')
	}
    dir.eachFileMatch(~/.*.groovy/) { file ->  
      	filePath=FilenameUtils.removeExtension("${pipelineProjBaseFolderJenkins}/"+"${workspaceDir}".toURI().relativize( file.getPath().toURI() ).toString())
      	
      	workflowJob(filePath) {
    		definition {
        		cps {
              		script(readFileFromWorkspace(file.getPath()))
                  	sandbox()
                }	
        	}
    	}
    }  
}